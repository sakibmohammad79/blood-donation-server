// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String  @unique
  userName String @unique
  role UserRole
  password String
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  isDonor Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donor Donor?
  admin Admin?
}


model Donor {
  id String   @id @default(uuid())
  email String @unique
  user User @relation(fields: [email], references: [email])
  name String
  gender Gender
  contactNumber String?
  photo     String?  
  availability Boolean @default(true)
  bloodType BloodType
  location  String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestsMade  Request[] @relation("Requester")
  requestsReceived Request[] @relation("Receiver")
  review Review[]
}

model Admin {
  id        String      @id @default(uuid())
  email     String   @unique
  name String
  contactNumber String?
  photo     String? 
  gender Gender?
  location  String?
  bloodType BloodType?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
}


model Request {
  id          String      @id @default(uuid())
  requesterId String
  requester   Donor     @relation("Requester", fields: [requesterId], references: [id])
  receiverId  String
  receiver    Donor     @relation("Receiver", fields: [receiverId], references: [id])
  bloodType   String
  status      RequestStatus @default(PENDING)
  hospitalName String
  requesterEmail String
  location String
  contactNumber String
  requestDate String
  requesterName String
  bloodNeedDetails String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Review {
  id        String      @id @default(uuid())
  name     String
  donorId String
  address   String
  photo    String?
  details String
  rating Float
  status ReviewStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donor Donor @relation(fields: [donorId], references: [id])
}

enum ReviewStatus {
  APPROVED
  PENDING
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}


enum BloodType {
  A_POSITIVE  
  A_NEGATIVE  
  B_POSITIVE  
  B_NEGATIVE  
  AB_POSITIVE  
  AB_NEGATIVE  
  O_POSITIVE  
  O_NEGATIVE  
}

enum UserRole {
    DONOR
    ADMIN
}

enum UserStatus {
    ACTIVE
    BLOCKED
    DELETED
}

enum Gender {
  MALE
  FEMALE
}

 
